Ellipse  ...

Functions can be declared to accept fewer arguments than specified 
in the function definition, using one of two methods: ellipsis (...)
or default arguments.

Ellipses denote that arguments may be required but that the number 
and types are not specified in the declaration. This is normally poor 
C++ programming practice because it defeats one of the benefits of C++: 
type safety. Different conversions are applied to functions declared with 
ellipses than to those functions for which the formal and actual argument 
types are known: 

If the actual argument is of type float, it is promoted to type double 
prior to the function call. Any signed or unsigned char, short, enumerated 
type, or bit field is converted to either a signed or an unsigned int using 
integral promotion. 
Any argument of class type is passed by value as a data structure; the copy 
is created by binary copying instead of by invoking the class's copy 
constructor (if one exists). Ellipses, if used, must be declared last in the 
argument list.

